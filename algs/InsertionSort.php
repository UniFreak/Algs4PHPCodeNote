<?php
namespace Algs;

/**
 * p.156
 *
 * 插入排序: 找位置, 类似整理桥牌 -- 不断的依次把每个元素插入到合适位置
 * 与选择排序一样, 当前索引左边的所有元素都是有序的, 但它们的最终位置还不确定
 *
 * 插入排序对于实际应用中常见的某些类型的**非随机数组**很有效, 如
 * - 数组中每个元素距离它的最终位置都不远
 * - 一个有序的大数组接一个小数组
 * - 数组中只有几个元素的位置不确定
 * 插入排序也很适合小规模数组
 *
 * 命题
 *   - 对于随机排列的长度为 N 且**主键不重复**的数组:
 *     1. 平均情况 (随机): ~N^2/4 次比较, ~N^2/4 次交换
 *     2. 最坏情况 (倒序): ~N^2/2 次比较, ~N^2/2 次交换
 *     3. 最好情况 (有序): N-1 次比较, 0 次交换
 *   - 我们把数组中两个顺序颠倒的元素称为 **倒置**, 则比较次数大于等于倒置的数量, 小于等于倒置的数量加上 N-1
 *
 * @todo  改进
 * - 在内循环中将较大的元素都向右移动而不总是交换两个元素, 这样访问数组的次数就能减半
 */
class InsertionSort extends Sort
{
    public static function sort(array &$a): void
    {
        $N = count($a);
        for ($i = 1; $i < $N; $i++) { // i 从 1 开始
            // 将 $a[$i] 与 $a[$i-1] 到 $a[0] 中比 $a[$i] 大的元素依次交换
            // 即: 将$a[$i] 移动到 $i 之前合适的位置
            for ($j = $i; $j > 0 && self::less($a[$j], $a[$j-1]); $j--) {
                self::exch($a, $j, $j-1); // $j 与 $j-1 交换
            }
        }
    }
}